#!/bin/bash
set -e

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
PROJECT_DIR="$( cd -P "$( dirname "$SOURCE" )/.." >/dev/null 2>&1 && pwd )"

if [ "$(docker ps | grep markslides_markslides-dev)" != "" ]; then 
  echo "Development Environment Rails"
  docker-compose -f $PROJECT_DIR/docker-compose.yml exec markslides-dev npx $@
elif [ "$(docker ps | grep markslides-markslides-dev)" != "" ]; then
  docker compose -f $PROJECT_DIR/docker-compose.yml exec markslides-dev npx $@
elif [ "$(docker ps | grep docker_markslides-prod)" != "" ]; then
  echo "Production Environment Rails"
  docker-compose -f $PROJECT_DIR/docker/prod.yml exec markslides-prod npx $@
elif [ "$(docker ps | grep docker-markslides-prod)" != "" ]; then
  docker compose -f $PROJECT_DIR/docker/prod.yml exec markslides-prod npx $@
else
  echo "No Docker Container Found"
fi